{
  "name": "gulp-notify",
  "version": "1.2.5",
  "description": "A plugin for Gulp to send notification messages (Mac, Linux and Windows",
  "keywords": [
    "gulpplugin",
    "notify",
    "gulp",
    "notification",
    "reporter"
  ],
  "homepage": "https://github.com/mikaelbr/gulp-notify",
  "bugs": {
    "url": "https://github.com/mikaelbr/gulp-notify/issues"
  },
  "author": {
    "name": "Mikael Brevik",
    "email": "mikaelbre@gmail.com",
    "url": "https://github.com/mikaelbr"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikaelbr/gulp-notify.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "dependencies": {
    "through2": "~0.4.0",
    "gulp-util": "~2.2.12",
    "lodash.template": "~2.4.1",
    "node-notifier": "^2.0.4",
    "node.extend": "^1.0.9"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": "~3.1.2",
    "gulp": "~3.5.2",
    "gulp-plumber": "~0.5.6"
  },
  "engines": {
    "node": ">=0.8.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-notify [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> notification plugin for [gulp](https://github.com/gulpjs/gulp)\n\n## Information\n| Package       | gulp-notify  |\n| ------------- |--------------|\n| Description   | Send messages to Mac Notification Center or Linux notifications (using `notify-send`) using the [node-notifier](https://github.com/mikaelbr/node-notifier) module or Growl if not any of them. Can also [specify custom notifier](#notifywithreporterfunction). |\n| Node Version  | >= 0.8      |\n| Package Version  | 1.2.4     |\n\n**Note: Without overriding the notifier, Mac OS X >= 10.8 or as of v0.3.2, Linux with `notify-send` installed is required for this to run.**\n**After version `1.1.0` this now supports Growl natively.**\n\n## Usage\n\nFirst, install `gulp-notify` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-notify\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\n\nvar notify = require(\"gulp-notify\");\ngulp.src(\"./src/test.ext\")\n  .pipe(notify(\"Hello Gulp!\"));\n```\n\nOr with template\n\n\n```javascript\n\nvar notify = require(\"gulp-notify\");\ngulp.src(\"./src/test.ext\")\n  .pipe(notify(\"Found file: <%= file.relative %>!\"));\n```\n\nSee [examples](examples/gulpfile.js) for more og the API section for various inputs.\n\n## Notes/tip\n\n`gulp-notify` passes on the `vinyl files` even on error. So if you are\nusing [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber) the run\nwill not break if the notifier returns an error.\n\nIf you want to notify on errors [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber)\ncan be used to not break the run and force you to have to restart gulp.\n\nYou can use [notify.onError()](#notifyonerror) as the errorHandler for gulp-plumber like this:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(plumber({errorHandler: notify.onError(\"Error: <%= error.message %>\")}))\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }));\n```\n\n## API\n\n### notify(String)\n\nA message to notify per data on stream.\nThe string can be a lodash template as\nit is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\n### notify(Function)\nType: `function(VinylFile)`\n\nThe result of the function is used as message.\nVinyl File from gulp stream passed in as argument.\n\nThe returned string can be a lodash template as\nit is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nIf `false` is returned from the function the notification won't run.\n\n### notify(options)\n\n*Options are passed onto the reporter, so on Windows, you can define\nGrowl host and so on. See [node-notifier](https://github.com/mikaelbr/node-notifier)\nfor more information*\n\n#### options.onLast\nType: `Boolean`\nDefault: `false`\n\nIf the notification should only happen on the last file\nof the stream. Per default a notification is triggered\non each file.\n\n\n#### options.message\nType: `String`\nDefault: File path in stream\n\nThe message you wish to attach to file. The string can be a\nlodash template as it is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nExample: `Created <%= file.relative %>`.\n\n##### as function\nType: `Function(vinylFile)`\n\nSee `notify(Function)`.\n\n#### options.title\nType: `String`\nDefault: \"Gulp Notification\"\n\nThe title of the notification. The string can be a\nlodash template as it is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nExample: `Created <%= file.relative %>`.\n\n##### as function\nType: `Function(vinylFile)`\n\nSee `notify(Function)`.\n\n#### options.templateOptions\nType: `Object`\nDefault: {}\n\nObject passed to the `lodash` template, for additional properties passed to the template.\n\nExamples:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n    .pipe(notify({\n      message: \"Generated file: <%= file.relative %> @ <%= options.date %>\",\n      templateOptions: {\n        date: new Date()\n      }\n    }))\n```\n\n#### options.notifier\nType: `Function(options, callback)`\nDefault: node-notifier module\n\nSwap out the notifier by passing in an function.\nThe function expects two arguments: options and callback.\n\nThe callback must be called when the notification is finished. Options\nwill contain both title and message.\n\n*See `notify.withReporter` for syntactic sugar.*\n\n\n### notify.withReporter(Function)\nType: `Reporter`\n\nWraps `options.notifier` to return a new notify-function only using\nthe passed in reporter.\n\nExample:\n\n```javascript\nvar custom = notify.withReporter(function (options, callback) {\n  console.log(\"Title:\", options.title);\n  console.log(\"Message:\", options.message);\n  callback();\n});\n\ngulp.src(\"../test/fixtures/1.txt\")\n    .pipe(custom(\"This is a message.\"));\n\n```\n\nThis will be the same as\n\n```javascript\n\ngulp.src(\"../test/fixtures/1.txt\")\n    .pipe(notify({\n      message: \"This is a message.\"\n      notifier: function (options, callback) {\n        console.log(\"Title:\", options.title);\n        console.log(\"Message:\", options.message);\n        callback();\n      }\n    }));\n```\n\nBut much, much prettier.\n\n\n### notify.onError()\n\nThe exact same API as using `notify()`, but where a `vinyl File`\nis passed, the error object is passed instead.\n\nExample:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError(function (error) {\n        return \"Message to the notifier: \" + error.message;\n      }));\n```\n\nOr simply:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError(\"Error: <%= error.message %>\"));\n```\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError({\n        message: \"Error: <%= error.message %>\",\n        title: \"Error running something\"\n      }));\n```\n\nThe `onError()` end point does support `lodash.template`.\n\n### notify.logLevel(level)\nType: `Integer`\nDefault: `2`\n\nSet if logger should be used or not. If log level is set to 0,\nno logging will be used. If no new log level is passed, the\ncurrent log level is returned.\n\n* `0`: No logging\n* `1`: Log on error\n* `2`: Log both on error and regular notification.\n\nIf logging is set to `> 0`, the title and\nmessage passed to `gulp-notify` will be logged like so:\n\n```sh\n➜  gulp-notify git:(master) ✗ gulp --gulpfile examples/gulpfile.js one\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/repos/gulp-notify/examples\n[gulp] Running 'one'...\n[gulp] Finished 'one' in 4.08 ms\n[gulp] gulp-notify: [Gulp notification] /Users/example/gulp-notify/test/fixtures/1.txt\n```\n\n## Examples\n\nTo see all examples run from root:\n\n```shell\n$ gulp --gulpfile examples/gulpfile.js --tasks\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/gulp-notify/examples\n[gulp] Tasks for /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] ├── multiple\n[gulp] ├── one\n[gulp] ├── message\n[gulp] ├── customReporter\n[gulp] ├── template\n[gulp] ├── templateadv\n[gulp] ├── function\n[gulp] ├── onlast\n[gulp] ├── error\n[gulp] └── customError\n```\n\nTo run an example:\n```shell\n$ gulp --gulpfile examples/gulpfile.js multiple\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/gulp-notify/examples\n[gulp] Running 'multiple'...\n[gulp] Finished 'multiple' in 3.75 ms\n```\n\n### As jshint reporter\n\n`gulp-notify` can easily be used as jshint reporter.\nAs jshint exposes the result on the vinyl file we can\nuse them in a function like so:\n\n```javascript\ngulp.task('lint', function() {\n  gulp.src('/src/**/*.js')\n    .pipe(jshint())\n    // Use gulp-notify as jshint reporter\n    .pipe(notify(function (file) {\n      if (file.jshint.success) {\n        // Don't show something if success\n        return false;\n      }\n\n      var errors = file.jshint.results.map(function (data) {\n        if (data.error) {\n          return \"(\" + data.error.line + ':' + data.error.character + ') ' + data.error.reason;\n        }\n      }).join(\"\\n\");\n      return file.relative + \" (\" + file.jshint.results.length + \" errors)\\n\" + errors;\n    }));\n});\n```\n\nIf you use a function for message in `gulp-notify`, the message won't be shown.\nThis is true for both direct use of function and `{ message: function () {}}`.\n\n## Changelog\n\n### `v1.2.1`\n1. The entire options-object is passed to the notifier, allowing pass additional information to notifiers.\n2. Adds support for showing errors returned from the notifiers and showing these errors in the console.\n\n### `v1.1.0`\n1. Bumps dependency for `node-notifier`. Now supports Growl on Windows!\n\n### `v1.0.0-beta`\n1. Major rewrites and restructure in code\n2. Lock down on API, changes `setLogLevel` to `logLevel`\n3. Exposes logLevel and logger on the withReporter object.\n\n### `v0.6.2`\n1. Adds another logging level: 0 - none, 1 - error, 2 - all.\n\n### `v0.6.1`\n1. Added `.onError` method on object created by `withReporter`\n2. Added colored logging on success / error\n\n### `v0.5.0`\n1. Added API end point `notify.withReporter(Reporter)` as syntactic suger for custom reporter\n2. Updated dependency for node-notfier - now checking if `notify-send` is installed on the Linux box\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-notify\n[npm-image]: https://badge.fury.io/js/gulp-notify.png\n\n[travis-url]: http://travis-ci.org/mikaelbr/gulp-notify\n[travis-image]: https://secure.travis-ci.org/mikaelbr/gulp-notify.png?branch=master\n\n[depstat-url]: https://david-dm.org/mikaelbr/gulp-notify\n[depstat-image]: https://david-dm.org/mikaelbr/gulp-notify.png\n",
  "readmeFilename": "README.md",
  "_id": "gulp-notify@1.2.5",
  "dist": {
    "shasum": "071ef2dc1dca90e88ff733f01faa16495a37e472"
  },
  "_from": "gulp-notify@*",
  "_resolved": "https://registry.npmjs.org/gulp-notify/-/gulp-notify-1.2.5.tgz"
}
